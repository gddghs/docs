
=========================vim 使用基础======================

~~ 默认进入是“正常模式”，按i切换到“插入模式”，按Esc退回到“正常模式”。
~~ “正常模式”按：进入“命令模式”

1、设置编码: 命令模式下set encoding=utf-8
   也可以修改vimrc文件，就不用每次都执行上面命令了.


2、光标的移动
这里说的光标移动是指在正常模式下光标的移动。
最简单是方向键，它即使在插入模式下仍可使用，但不是最方便。
h 在当前行向左移动一个字符，或者Backspace。
j 移动到下一行，或者Enter。
k 移动到上一行，或者- 号。
l 在当前行向右移动一个字符，或者空格键Space。

Ctrl +f 向前滚动一页，或者PageDown。
Ctrl +b 向后滚动一页，或者PageUp。
0(零) 移至行首（包含空白字符，如缩进的空格），或是Home 键。
$ 移至行尾， 或End 键。
^ 移到行首第一个非空白字符。
G 移动到文档末尾，或者
gg 移动到文档开头。
w 移动到下一word的开头。
b 移动到上一word的开头。
e 移动到本word或者下个word的末尾。
ge 移动到上个word的末尾。
大写的W B E 和w b e 效果一样但会忽略像. - 等特殊字符。
中文因为是连在一起的，所以如果没有空格或者数字、英文标点的话，将视为一个word。
( 光标移至句首，句子是以. ? ! 标点来判断的。
) 光标移至句尾
{ 光标移至段落的开头，段落是以空白行来判断的。
} 光标移至段落的结尾
H 将光标移至屏幕顶第一个非空白字符。
M 光标移至屏幕中间第一个非空白字符。
L 光标移至屏幕底第一个非空白字符。这和PageDown，PageUp 不一样，内文内容并未动，只是光标在动而已。
:n 将光标定位到第n行。
n| 将光标移动到本行第n个字符。


3、打开和退出
:e test.txt 打开test.txt文件进行编辑,文件不存在则创建。
:w 保存不退出 
:q 不保存退出
:wq 保存然后退出。按ZZ(注意Z是大写的，并且不是在命令模式)或者:x效果是一样的。
:q! 放弃所有修改强制退出，按:q不能退出时就试试这个吧。


4、编辑
x  删除当前光标下的字符
dw 删除光标之后的单词剩余部分。
d$ 删除光标之后的该行剩余部分。
dd 删除当前行。

c  功能和d相同，区别在于完成删除操作后进入INSERT MODE
cc 也是删除当前行，然后进入INSERT MODE


5、查找指令：
/xxx 往下查找
?xxx 往上 
n    下一个
:set hls 打开高亮
:set nohls 关闭高亮


6、替换
vi/vim 中可以使用:s命令来替换字符串.
:%s/four/4/g 用4替换four

“%” 范围前缀表示在所有行中执行替换。最后的 “g”标记表示替换行中的所有匹配点。如果仅仅对当前行进行操作，那么只要去掉%即可.

如果你有一个象 “thirtyfour”
这样的单词，上面的命令会出错。这种情况下，这个单词会被替换成“thirty4”。

要解决这个问题，用 “\<” 来指定匹配单词开头：:%s/\<four/4/g 
显然，这样在处理 “fourty” 的时候还是会出错。用 “\>” 来解决这个问题:
%s/\<four\>/4/g   

如果你在编码，你可能只想替换注释中的
“four”，而保留代码中的。由于这很难指定，可以在替换命令中加一个 “c” 标记，这样，Vim 会在每次替换前提示你：
        :%s/\/4/gc

